openapi: "3.0.3"
info:
  title: "Delilah Resto"
  description: "API for the management of restaurant orders and deliveries. Users can register, list the available products,
  place orders, read and update their information. An admin user can see and update all orders and products, create, update and delete products,
  as well as reading all the users' information."
  version: "1.0.0"
  contact:
    name: "Aldana Daniela Casal"
    url: "https://github.com/aldanadc"
  license:
    name: "ISC"
servers:
  - url: "http://localhost:8080/api/1.0.0"
    description: "Local serverrrr"
paths:
  /login:
    post:
      summary: "Login to user account"
      description: "Allows an user to log into their account if they are a registered user"
      responses:
        "200":
          $ref: "#/components/responses/200Success"
        "401":
          $ref: "#/components/responses/401NotAuthenticated"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /register:
    post:
      summary: "Create a new user"
      description: "Allows a new user to create an account provided they complete all the necessary information"
      requestBody:
        description: "New user's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              $ref: "#/components/examples/User"
      responses:
        "201":
          $ref: "#/components/responses/201Created"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /products:
    get:
      summary: "Returns an array of objects with information for all the available products"
      responses:
        "200":
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
              example:
                $ref: "#/components/examples/Products"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
    post:
      summary: "Create a new product"
      description: "Allows an admin user to create a new product following a set structure and add it to the available products"
      requestBody:
        description: "New product's details"
        required: true
        content:
          application/json:
              schema:
                $ref: "#/components/schemas/Product"
      responses:
        "201": 
          $ref: "#/components/responses/201Created"
          description: "Details of the newly created product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /products/{product_id}:
    parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
    get:
      summary: "Returns the details of a product searching by its ID"
      responses:
        "200":
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
              example:  
                $ref: "#/components/examples/Product"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
    patch:
      summary: "Update an existing product"
      description: "Allows an admin user to partially update the details for an existing product"
      requestBody:
        description: "Information to be updated on the product"
        required: true
        content:
          application/json:
              example:
                price: 399.99
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          description: "Details of the product after its update"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
    delete:
      summary: "Delete an existing product"
      description: "Allows an admin user to delete an existing product"
      responses:
        "204":
          description: "Product deleted"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /users:
    get:
      summary: "Returns the information for all registered users"
      description: "Returns a list of objects with details of all registered users. Only admin users can see this information"
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /users/{user_id}:
    parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
    get:
      summary: "Returns information about a specified user"
      description: "Returns a list with an object with the details of the requested user. A non-admin user will only get a successful response if they are asking for their own information"
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                $ref: "#/components/examples/User"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
    patch:
        summary: "Update information for an existing user"
        description: "Allows registered users to update their stored information. All users can only update their own details "
        requestBody:
          description: "User's new information"
          required: true
          content:
            application/json:
                example:
                  address: "10 Downing Street, London SW1A 2AB, UK"
                  phone_number: "+446565605898"
        responses:
          "200": 
            $ref: "#/components/responses/200Success"
          "400":
            $ref: "#/components/responses/400BadRequest"
          "401": 
            $ref: "#/components/responses/401NotAuthenticated"
          "403": 
            $ref: "#/components/responses/403Forbidden"
          "500":
            $ref: "#/components/responses/500DefaultError"
    delete:
      summary: "Delete an existing user"
      description: "Allows all users to delete their own user account"
      responses:
        "204":
          description: "User deleted"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /users/{user_id}/favs:
    get:
      summary: "Returns information about an user's favourites products"
      description: "Returns an array of objects with the specified user's id, username and an array containing their associated favourite products. An admin user can see everybody's favourites but a non-admin user can only see their own"
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
              example:  
                $ref: "#/components/examples/Products"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /orders:
    get:
      summary: "Returns information about current day's orders"
      description: "For admin users, returns an array of objects containing the restaurant's current day's orders, from 00hs to 23.59hs. For non-admin users, it returns the orders they placed on that day if they have any. The products associated to each order are also included in the order's information"
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "404": 
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
    post:
      summary: "Create a new order"
      description: "Allows a registered user to send a new order to the restaurant, choosing the products they want and the payment method"
      requestBody:
        description: "Details of the order to be sent"
        required: true
        content:
          application/json:
              schema:
                $ref: "#/components/schemas/Order"
              example:
                $ref: "#/components/examples/Order"
      responses:
        "201":
          $ref: "#/components/responses/201Created"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /orders/{order_id}:
    parameters:
        - in: path
          name: order_id
          required: true
          schema:
            type: integer
    get:
      summary: "Get an order's details"
      description: "Returns an object with information about the specified order's details. A non-admin user can only see the information if they were the ones that placed the order"
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              example:
                $ref: "#/components/examples/Order"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
    patch:
      summary: "Update an order's status"
      description: "Allows an admin user to update the specified order's status, following one of the pre-set stages"
      requestBody:
        description: "Order's new status"
        required: true
        content:
          application/json:
              schema:
                type: string
                enum:
                  - "new"
                  - "confirmed"
                  - "preparing"
                  - "sending"
                  - "cancelled"
                  - "delivered"
      responses:
        "204": 
          description: "Order status updated"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "403": 
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
        
  /history:
    get:
      summary: "Returns information about all of the orders for the restaurant"
      description: "Returns a list of objects containing information about all the orders placed.  If the user is non-admin, they will only see the orders they placed"
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"

  /history/:date:
    get:
      summary: "Returns information about orders placed on a specified date"
      description: "Returns a list of objects containing information about the specified date's orders. The array will be empty if no orders were place that day"
      parameters:
        - in: query
          name: date
          schema:
            type: string
          example:
            "2021,04,05"
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
  
  /history/user/{user_id}:
    get:
      summary: "Returns information about a user's order history"
      description: "Returns a list of objects containing information about the specified user's order history. Only admin users can access this content"
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200": 
          $ref: "#/components/responses/200Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "401": 
          $ref: "#/components/responses/401NotAuthenticated"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500DefaultError"
  
components:
  schemas:
    Product:
      type: object
      properties:
        product_id:
          type: number
        name:
          type: string
        description:
          type: string
        image:
          type: string
        ingredients:
          type: string
        price:
          type: number
        is_disabled:
          type: boolean
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    User: 
      type: object
      properties:
        user_id:
          type: number
        username:
          type: string
        full_name:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string
        address: 
          type: string
        password:
          type: string
          format: password
        is_admin:
          type: boolean
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    OrderItem:
      type: object
      properties:
        product_id:
          type: number
        price:
          type: number
          format: float
        quantity:
          type: integer
    Order:
      type: object
      properties:
        order_id:
          type: integer
        order_status:
          type: string
          enum:
            - "new"
            - "confirmed"
            - "preparing"
            - "on its way"
            - "cancelled"
            - "delivered"
        order_date:
          type: string
          format: date-time
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem" 
        total: 
          type: number
          format: float
        payment_method:
          type: string
        delivery_address:
          type: string
        customer_name:
          type: string
        customer_email:
          type: string
        customer_phone:
          type: string
    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message
  responses:
    200Success:
      description: "Request sucessful"
    201Created:
      description: "Resource created"
    400BadRequest:
      description: "Incorrect or missing information, please check all required fields"
    401NotAuthenticated:
      description: "Invalid login information"
    403Forbidden:
      description: "User is not authorized to perform such action"
    404NotFound:
      description: "The requested resource does not exist"
    500DefaultError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  examples:
    Product:
      value:
        product_id: 1
        name: "Tacos al pastor"
        description: "Delicious taco with marinated pork and veal meat, with roasted vegetables, seasoning and hot sauce"
        image: "http://imagendetacos.com"
        ingredients: "pork and veal meat, hot chili, garlic, onion, cilantro leaves, cumin, salt, pineapple, corn tortilla"
        price: 349.99
        is_disabled: false
    Products:
      value:
        - name: "Tacos al pastor"
          description: "Delicious taco with marinated pork and veal meat, with roasted and fresh vegetables, seasoning and hot sauce"
          ingredients: "pork and veal meat, hot chili, garlic, onion, cilantro leaves, cumin, salt, pineapple, corn tortilla"
          price: 349.99
          is_disabled: false
        - name: "Carnitas burrito"
          description: "Our star burrito, made with marinated pork meat, roasted and fresh vegetables, black beans, cheese and white rice, seasoned with our delicious hot sauce"
          ingredients: "marinated pork meat, white rice, black beans, onion, tomato, lettuce, cilantro leaves, hot chili, avocado, salt, corn tortilla"
          price: 379.99
          is_disabled: true
    User:
      value:
        user_id: 1,
        username: "queen_freddie"
        full_name: "Freddie Mercury"
        email: "freddiemercury@gmail.com"
        phone_number: "+447712345678"
        address: "1 Logan Pl, Kensington, London, W8 6DE, UK"
        password: "Eeeeeeoo123"
        is_admin: false
    Order:
      value:
        order_id: 75
        order_status: "new"
        payment_method: "cash"
        created_at: "2021-05-05T23:23:59.000Z"
        updated_at: "2021-05-05T23:23:59.000Z"
        user_id: 3
        order_items:
          - product_id: 2
            name: "Tacos al pastor"
            image: "http://imagendetacos.com"
            price: 349.99
            order_products: 
              - product_qty: 1
        
        delivery_address: "1 Logan Pl, Kensington, London, W8 6DE, UK"
        customer_name: "Freddie Mercury"
        customer_email: "freddiemercury@gmail.com"
        customer_phone: "+447712345678"
